// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_dump_feature.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_dump_feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yidian {
namespace data {
namespace rawlog {

namespace {

const ::google::protobuf::Descriptor* FeatureKV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureKV_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DumpFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DumpFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DumpFeature_ContextsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5fdump_5ffeature_2eproto() {
  protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_dump_feature.proto");
  GOOGLE_CHECK(file != NULL);
  FeatureKV_descriptor_ = file->message_type(0);
  static const int FeatureKV_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, v_),
  };
  FeatureKV_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureKV_descriptor_,
      FeatureKV::default_instance_,
      FeatureKV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, _has_bits_[0]),
      -1,
      -1,
      sizeof(FeatureKV),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureKV, _internal_metadata_),
      -1);
  BaseFeature_descriptor_ = file->message_type(1);
  static const int BaseFeature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFeature, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFeature, values_),
  };
  BaseFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseFeature_descriptor_,
      BaseFeature::default_instance_,
      BaseFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(BaseFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseFeature, _internal_metadata_),
      -1);
  DocFeature_descriptor_ = file->message_type(2);
  static const int DocFeature_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, doc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, gbdtscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, features_),
  };
  DocFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DocFeature_descriptor_,
      DocFeature::default_instance_,
      DocFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(DocFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocFeature, _internal_metadata_),
      -1);
  DumpFeature_descriptor_ = file->message_type(3);
  static const int DumpFeature_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, docs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, buckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, contexts_),
  };
  DumpFeature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DumpFeature_descriptor_,
      DumpFeature::default_instance_,
      DumpFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, _has_bits_[0]),
      -1,
      -1,
      sizeof(DumpFeature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpFeature, _internal_metadata_),
      -1);
  DumpFeature_ContextsEntry_descriptor_ = DumpFeature_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5fdump_5ffeature_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureKV_descriptor_, &FeatureKV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseFeature_descriptor_, &BaseFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DocFeature_descriptor_, &DocFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DumpFeature_descriptor_, &DumpFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        DumpFeature_ContextsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                DumpFeature_ContextsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto() {
  delete FeatureKV::default_instance_;
  delete FeatureKV_reflection_;
  delete BaseFeature::default_instance_;
  delete BaseFeature_reflection_;
  delete DocFeature::default_instance_;
  delete DocFeature_reflection_;
  delete DumpFeature::default_instance_;
  delete DumpFeature_reflection_;
}

void protobuf_AddDesc_service_5fdump_5ffeature_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032service_dump_feature.proto\022\022yidian.dat"
    "a.rawlog\"!\n\tFeatureKV\022\t\n\001k\030\001 \001(\t\022\t\n\001v\030\002 "
    "\001(\001\"J\n\013BaseFeature\022\014\n\004name\030\001 \001(\t\022-\n\006valu"
    "es\030\002 \003(\0132\035.yidian.data.rawlog.FeatureKV\""
    "\230\001\n\nDocFeature\022\016\n\006doc_id\030\001 \001(\t\022\013\n\003ids\030\003 "
    "\003(\005\022\r\n\005score\030\004 \001(\001\022\r\n\005times\030\005 \001(\005\022\021\n\tgbd"
    "tscore\030\006 \001(\001\022\t\n\001y\030\007 \001(\001\0221\n\010features\030\010 \003("
    "\0132\037.yidian.data.rawlog.BaseFeature\"\363\001\n\013D"
    "umpFeature\022\017\n\007user_id\030\001 \001(\t\022,\n\004docs\030\002 \003("
    "\0132\036.yidian.data.rawlog.DocFeature\022\021\n\ttim"
    "estamp\030\003 \001(\003\022\017\n\007version\030\004 \001(\t\022\017\n\007buckets"
    "\030\005 \001(\t\022\?\n\010contexts\030\006 \003(\0132-.yidian.data.r"
    "awlog.DumpFeature.ContextsEntry\032/\n\rConte"
    "xtsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001", 560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_dump_feature.proto", &protobuf_RegisterTypes);
  FeatureKV::default_instance_ = new FeatureKV();
  BaseFeature::default_instance_ = new BaseFeature();
  DocFeature::default_instance_ = new DocFeature();
  DumpFeature::default_instance_ = new DumpFeature();
  FeatureKV::default_instance_->InitAsDefaultInstance();
  BaseFeature::default_instance_->InitAsDefaultInstance();
  DocFeature::default_instance_->InitAsDefaultInstance();
  DumpFeature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5fdump_5ffeature_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5fdump_5ffeature_2eproto {
  StaticDescriptorInitializer_service_5fdump_5ffeature_2eproto() {
    protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  }
} static_descriptor_initializer_service_5fdump_5ffeature_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int FeatureKV::kKFieldNumber;
const int FeatureKV::kVFieldNumber;
#endif  // !_MSC_VER

FeatureKV::FeatureKV()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yidian.data.rawlog.FeatureKV)
}

void FeatureKV::InitAsDefaultInstance() {
}

FeatureKV::FeatureKV(const FeatureKV& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yidian.data.rawlog.FeatureKV)
}

void FeatureKV::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureKV::~FeatureKV() {
  // @@protoc_insertion_point(destructor:yidian.data.rawlog.FeatureKV)
  SharedDtor();
}

void FeatureKV::SharedDtor() {
  k_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FeatureKV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureKV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureKV_descriptor_;
}

const FeatureKV& FeatureKV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  return *default_instance_;
}

FeatureKV* FeatureKV::default_instance_ = NULL;

FeatureKV* FeatureKV::New(::google::protobuf::Arena* arena) const {
  FeatureKV* n = new FeatureKV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureKV::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_k()) {
      k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FeatureKV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yidian.data.rawlog.FeatureKV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string k = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k().data(), this->k().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yidian.data.rawlog.FeatureKV.k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_v;
        break;
      }

      // optional double v = 2;
      case 2: {
        if (tag == 17) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yidian.data.rawlog.FeatureKV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yidian.data.rawlog.FeatureKV)
  return false;
#undef DO_
}

void FeatureKV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yidian.data.rawlog.FeatureKV)
  // optional string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.FeatureKV.k");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k(), output);
  }

  // optional double v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yidian.data.rawlog.FeatureKV)
}

::google::protobuf::uint8* FeatureKV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yidian.data.rawlog.FeatureKV)
  // optional string k = 1;
  if (has_k()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k().data(), this->k().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.FeatureKV.k");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k(), target);
  }

  // optional double v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yidian.data.rawlog.FeatureKV)
  return target;
}

int FeatureKV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional string k = 1;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->k());
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureKV::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeatureKV* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureKV>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureKV::MergeFrom(const FeatureKV& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_has_k();
      k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k_);
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FeatureKV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureKV::CopyFrom(const FeatureKV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureKV::IsInitialized() const {

  return true;
}

void FeatureKV::Swap(FeatureKV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureKV::InternalSwap(FeatureKV* other) {
  k_.Swap(&other->k_);
  std::swap(v_, other->v_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureKV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureKV_descriptor_;
  metadata.reflection = FeatureKV_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureKV

// optional string k = 1;
bool FeatureKV::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureKV::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureKV::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureKV::clear_k() {
  k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k();
}
 const ::std::string& FeatureKV::k() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.FeatureKV.k)
  return k_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureKV::set_k(const ::std::string& value) {
  set_has_k();
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.FeatureKV.k)
}
 void FeatureKV::set_k(const char* value) {
  set_has_k();
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yidian.data.rawlog.FeatureKV.k)
}
 void FeatureKV::set_k(const char* value, size_t size) {
  set_has_k();
  k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yidian.data.rawlog.FeatureKV.k)
}
 ::std::string* FeatureKV::mutable_k() {
  set_has_k();
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.FeatureKV.k)
  return k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeatureKV::release_k() {
  clear_has_k();
  return k_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureKV::set_allocated_k(::std::string* k) {
  if (k != NULL) {
    set_has_k();
  } else {
    clear_has_k();
  }
  k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k);
  // @@protoc_insertion_point(field_set_allocated:yidian.data.rawlog.FeatureKV.k)
}

// optional double v = 2;
bool FeatureKV::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureKV::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureKV::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureKV::clear_v() {
  v_ = 0;
  clear_has_v();
}
 double FeatureKV::v() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.FeatureKV.v)
  return v_;
}
 void FeatureKV::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.FeatureKV.v)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BaseFeature::kNameFieldNumber;
const int BaseFeature::kValuesFieldNumber;
#endif  // !_MSC_VER

BaseFeature::BaseFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yidian.data.rawlog.BaseFeature)
}

void BaseFeature::InitAsDefaultInstance() {
}

BaseFeature::BaseFeature(const BaseFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yidian.data.rawlog.BaseFeature)
}

void BaseFeature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseFeature::~BaseFeature() {
  // @@protoc_insertion_point(destructor:yidian.data.rawlog.BaseFeature)
  SharedDtor();
}

void BaseFeature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BaseFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseFeature_descriptor_;
}

const BaseFeature& BaseFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  return *default_instance_;
}

BaseFeature* BaseFeature::default_instance_ = NULL;

BaseFeature* BaseFeature::New(::google::protobuf::Arena* arena) const {
  BaseFeature* n = new BaseFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseFeature::Clear() {
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BaseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yidian.data.rawlog.BaseFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yidian.data.rawlog.BaseFeature.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .yidian.data.rawlog.FeatureKV values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yidian.data.rawlog.BaseFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yidian.data.rawlog.BaseFeature)
  return false;
#undef DO_
}

void BaseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yidian.data.rawlog.BaseFeature)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.BaseFeature.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .yidian.data.rawlog.FeatureKV values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yidian.data.rawlog.BaseFeature)
}

::google::protobuf::uint8* BaseFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yidian.data.rawlog.BaseFeature)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.BaseFeature.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .yidian.data.rawlog.FeatureKV values = 2;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yidian.data.rawlog.BaseFeature)
  return target;
}

int BaseFeature::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .yidian.data.rawlog.FeatureKV values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseFeature::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BaseFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseFeature>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseFeature::MergeFrom(const BaseFeature& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BaseFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseFeature::CopyFrom(const BaseFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseFeature::IsInitialized() const {

  return true;
}

void BaseFeature::Swap(BaseFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseFeature::InternalSwap(BaseFeature* other) {
  name_.Swap(&other->name_);
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseFeature_descriptor_;
  metadata.reflection = BaseFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseFeature

// optional string name = 1;
bool BaseFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseFeature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseFeature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseFeature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BaseFeature::name() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.BaseFeature.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BaseFeature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.BaseFeature.name)
}
 void BaseFeature::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yidian.data.rawlog.BaseFeature.name)
}
 void BaseFeature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yidian.data.rawlog.BaseFeature.name)
}
 ::std::string* BaseFeature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.BaseFeature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BaseFeature::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BaseFeature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:yidian.data.rawlog.BaseFeature.name)
}

// repeated .yidian.data.rawlog.FeatureKV values = 2;
int BaseFeature::values_size() const {
  return values_.size();
}
void BaseFeature::clear_values() {
  values_.Clear();
}
 const ::yidian::data::rawlog::FeatureKV& BaseFeature::values(int index) const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.BaseFeature.values)
  return values_.Get(index);
}
 ::yidian::data::rawlog::FeatureKV* BaseFeature::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.BaseFeature.values)
  return values_.Mutable(index);
}
 ::yidian::data::rawlog::FeatureKV* BaseFeature::add_values() {
  // @@protoc_insertion_point(field_add:yidian.data.rawlog.BaseFeature.values)
  return values_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::FeatureKV >&
BaseFeature::values() const {
  // @@protoc_insertion_point(field_list:yidian.data.rawlog.BaseFeature.values)
  return values_;
}
 ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::FeatureKV >*
BaseFeature::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:yidian.data.rawlog.BaseFeature.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DocFeature::kDocIdFieldNumber;
const int DocFeature::kIdsFieldNumber;
const int DocFeature::kScoreFieldNumber;
const int DocFeature::kTimesFieldNumber;
const int DocFeature::kGbdtscoreFieldNumber;
const int DocFeature::kYFieldNumber;
const int DocFeature::kFeaturesFieldNumber;
#endif  // !_MSC_VER

DocFeature::DocFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yidian.data.rawlog.DocFeature)
}

void DocFeature::InitAsDefaultInstance() {
}

DocFeature::DocFeature(const DocFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yidian.data.rawlog.DocFeature)
}

void DocFeature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  doc_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  times_ = 0;
  gbdtscore_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocFeature::~DocFeature() {
  // @@protoc_insertion_point(destructor:yidian.data.rawlog.DocFeature)
  SharedDtor();
}

void DocFeature::SharedDtor() {
  doc_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DocFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocFeature_descriptor_;
}

const DocFeature& DocFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  return *default_instance_;
}

DocFeature* DocFeature::default_instance_ = NULL;

DocFeature* DocFeature::New(::google::protobuf::Arena* arena) const {
  DocFeature* n = new DocFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocFeature::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DocFeature*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 61u) {
    ZR_(score_, y_);
    if (has_doc_id()) {
      doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    times_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ids_.Clear();
  features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DocFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yidian.data.rawlog.DocFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string doc_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->doc_id().data(), this->doc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yidian.data.rawlog.DocFeature.doc_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        break;
      }

      // repeated int32 ids = 3;
      case 3: {
        if (tag == 24) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        if (input->ExpectTag(33)) goto parse_score;
        break;
      }

      // optional double score = 4;
      case 4: {
        if (tag == 33) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional int32 times = 5;
      case 5: {
        if (tag == 40) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_gbdtscore;
        break;
      }

      // optional double gbdtscore = 6;
      case 6: {
        if (tag == 49) {
         parse_gbdtscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gbdtscore_)));
          set_has_gbdtscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_y;
        break;
      }

      // optional double y = 7;
      case 7: {
        if (tag == 57) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_features;
        break;
      }

      // repeated .yidian.data.rawlog.BaseFeature features = 8;
      case 8: {
        if (tag == 66) {
         parse_features:
          DO_(input->IncrementRecursionDepth());
         parse_loop_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_features;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yidian.data.rawlog.DocFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yidian.data.rawlog.DocFeature)
  return false;
#undef DO_
}

void DocFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yidian.data.rawlog.DocFeature)
  // optional string doc_id = 1;
  if (has_doc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_id().data(), this->doc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.DocFeature.doc_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doc_id(), output);
  }

  // repeated int32 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->ids(i), output);
  }

  // optional double score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->score(), output);
  }

  // optional int32 times = 5;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->times(), output);
  }

  // optional double gbdtscore = 6;
  if (has_gbdtscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gbdtscore(), output);
  }

  // optional double y = 7;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->y(), output);
  }

  // repeated .yidian.data.rawlog.BaseFeature features = 8;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->features(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yidian.data.rawlog.DocFeature)
}

::google::protobuf::uint8* DocFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yidian.data.rawlog.DocFeature)
  // optional string doc_id = 1;
  if (has_doc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->doc_id().data(), this->doc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.DocFeature.doc_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->doc_id(), target);
  }

  // repeated int32 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->ids(i), target);
  }

  // optional double score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->score(), target);
  }

  // optional int32 times = 5;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->times(), target);
  }

  // optional double gbdtscore = 6;
  if (has_gbdtscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gbdtscore(), target);
  }

  // optional double y = 7;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->y(), target);
  }

  // repeated .yidian.data.rawlog.BaseFeature features = 8;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->features(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yidian.data.rawlog.DocFeature)
  return target;
}

int DocFeature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 61) {
    // optional string doc_id = 1;
    if (has_doc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_id());
    }

    // optional double score = 4;
    if (has_score()) {
      total_size += 1 + 8;
    }

    // optional int32 times = 5;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional double gbdtscore = 6;
    if (has_gbdtscore()) {
      total_size += 1 + 8;
    }

    // optional double y = 7;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  // repeated .yidian.data.rawlog.BaseFeature features = 8;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocFeature::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DocFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DocFeature>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocFeature::MergeFrom(const DocFeature& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ids_.MergeFrom(from.ids_);
  features_.MergeFrom(from.features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doc_id()) {
      set_has_doc_id();
      doc_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_id_);
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_gbdtscore()) {
      set_gbdtscore(from.gbdtscore());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DocFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocFeature::CopyFrom(const DocFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocFeature::IsInitialized() const {

  return true;
}

void DocFeature::Swap(DocFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocFeature::InternalSwap(DocFeature* other) {
  doc_id_.Swap(&other->doc_id_);
  ids_.UnsafeArenaSwap(&other->ids_);
  std::swap(score_, other->score_);
  std::swap(times_, other->times_);
  std::swap(gbdtscore_, other->gbdtscore_);
  std::swap(y_, other->y_);
  features_.UnsafeArenaSwap(&other->features_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocFeature_descriptor_;
  metadata.reflection = DocFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocFeature

// optional string doc_id = 1;
bool DocFeature::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocFeature::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocFeature::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocFeature::clear_doc_id() {
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_id();
}
 const ::std::string& DocFeature::doc_id() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DocFeature.doc_id)
  return doc_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DocFeature::set_doc_id(const ::std::string& value) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DocFeature.doc_id)
}
 void DocFeature::set_doc_id(const char* value) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yidian.data.rawlog.DocFeature.doc_id)
}
 void DocFeature::set_doc_id(const char* value, size_t size) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yidian.data.rawlog.DocFeature.doc_id)
}
 ::std::string* DocFeature::mutable_doc_id() {
  set_has_doc_id();
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.DocFeature.doc_id)
  return doc_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DocFeature::release_doc_id() {
  clear_has_doc_id();
  return doc_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DocFeature::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id != NULL) {
    set_has_doc_id();
  } else {
    clear_has_doc_id();
  }
  doc_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_id);
  // @@protoc_insertion_point(field_set_allocated:yidian.data.rawlog.DocFeature.doc_id)
}

// repeated int32 ids = 3;
int DocFeature::ids_size() const {
  return ids_.size();
}
void DocFeature::clear_ids() {
  ids_.Clear();
}
 ::google::protobuf::int32 DocFeature::ids(int index) const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DocFeature.ids)
  return ids_.Get(index);
}
 void DocFeature::set_ids(int index, ::google::protobuf::int32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DocFeature.ids)
}
 void DocFeature::add_ids(::google::protobuf::int32 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:yidian.data.rawlog.DocFeature.ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocFeature::ids() const {
  // @@protoc_insertion_point(field_list:yidian.data.rawlog.DocFeature.ids)
  return ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocFeature::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:yidian.data.rawlog.DocFeature.ids)
  return &ids_;
}

// optional double score = 4;
bool DocFeature::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocFeature::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void DocFeature::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocFeature::clear_score() {
  score_ = 0;
  clear_has_score();
}
 double DocFeature::score() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DocFeature.score)
  return score_;
}
 void DocFeature::set_score(double value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DocFeature.score)
}

// optional int32 times = 5;
bool DocFeature::has_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocFeature::set_has_times() {
  _has_bits_[0] |= 0x00000008u;
}
void DocFeature::clear_has_times() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocFeature::clear_times() {
  times_ = 0;
  clear_has_times();
}
 ::google::protobuf::int32 DocFeature::times() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DocFeature.times)
  return times_;
}
 void DocFeature::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DocFeature.times)
}

// optional double gbdtscore = 6;
bool DocFeature::has_gbdtscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocFeature::set_has_gbdtscore() {
  _has_bits_[0] |= 0x00000010u;
}
void DocFeature::clear_has_gbdtscore() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocFeature::clear_gbdtscore() {
  gbdtscore_ = 0;
  clear_has_gbdtscore();
}
 double DocFeature::gbdtscore() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DocFeature.gbdtscore)
  return gbdtscore_;
}
 void DocFeature::set_gbdtscore(double value) {
  set_has_gbdtscore();
  gbdtscore_ = value;
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DocFeature.gbdtscore)
}

// optional double y = 7;
bool DocFeature::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocFeature::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
void DocFeature::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocFeature::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double DocFeature::y() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DocFeature.y)
  return y_;
}
 void DocFeature::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DocFeature.y)
}

// repeated .yidian.data.rawlog.BaseFeature features = 8;
int DocFeature::features_size() const {
  return features_.size();
}
void DocFeature::clear_features() {
  features_.Clear();
}
 const ::yidian::data::rawlog::BaseFeature& DocFeature::features(int index) const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DocFeature.features)
  return features_.Get(index);
}
 ::yidian::data::rawlog::BaseFeature* DocFeature::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.DocFeature.features)
  return features_.Mutable(index);
}
 ::yidian::data::rawlog::BaseFeature* DocFeature::add_features() {
  // @@protoc_insertion_point(field_add:yidian.data.rawlog.DocFeature.features)
  return features_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::BaseFeature >&
DocFeature::features() const {
  // @@protoc_insertion_point(field_list:yidian.data.rawlog.DocFeature.features)
  return features_;
}
 ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::BaseFeature >*
DocFeature::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:yidian.data.rawlog.DocFeature.features)
  return &features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DumpFeature::kUserIdFieldNumber;
const int DumpFeature::kDocsFieldNumber;
const int DumpFeature::kTimestampFieldNumber;
const int DumpFeature::kVersionFieldNumber;
const int DumpFeature::kBucketsFieldNumber;
const int DumpFeature::kContextsFieldNumber;
#endif  // !_MSC_VER

DumpFeature::DumpFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yidian.data.rawlog.DumpFeature)
}

void DumpFeature::InitAsDefaultInstance() {
}

DumpFeature::DumpFeature(const DumpFeature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yidian.data.rawlog.DumpFeature)
}

void DumpFeature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buckets_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contexts_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  contexts_.SetEntryDescriptor(
      &::yidian::data::rawlog::DumpFeature_ContextsEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DumpFeature::~DumpFeature() {
  // @@protoc_insertion_point(destructor:yidian.data.rawlog.DumpFeature)
  SharedDtor();
}

void DumpFeature::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buckets_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DumpFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DumpFeature_descriptor_;
}

const DumpFeature& DumpFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5fdump_5ffeature_2eproto();
  return *default_instance_;
}

DumpFeature* DumpFeature::default_instance_ = NULL;

DumpFeature* DumpFeature::New(::google::protobuf::Arena* arena) const {
  DumpFeature* n = new DumpFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpFeature::Clear() {
  if (_has_bits_[0 / 32] & 29u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_buckets()) {
      buckets_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  docs_.Clear();
  contexts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DumpFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yidian.data.rawlog.DumpFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yidian.data.rawlog.DumpFeature.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_docs;
        break;
      }

      // repeated .yidian.data.rawlog.DocFeature docs = 2;
      case 2: {
        if (tag == 18) {
         parse_docs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_docs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_docs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4;
      case 4: {
        if (tag == 34) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yidian.data.rawlog.DumpFeature.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_buckets;
        break;
      }

      // optional string buckets = 5;
      case 5: {
        if (tag == 42) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buckets()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buckets().data(), this->buckets().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "yidian.data.rawlog.DumpFeature.buckets");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_contexts;
        break;
      }

      // map<string, string> contexts = 6;
      case 6: {
        if (tag == 50) {
         parse_contexts:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contexts:
          ::google::protobuf::scoped_ptr<DumpFeature_ContextsEntry> entry(contexts_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_contexts())[entry->key()] = *entry->mutable_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_contexts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yidian.data.rawlog.DumpFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yidian.data.rawlog.DumpFeature)
  return false;
#undef DO_
}

void DumpFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yidian.data.rawlog.DumpFeature)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.DumpFeature.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // repeated .yidian.data.rawlog.DocFeature docs = 2;
  for (unsigned int i = 0, n = this->docs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->docs(i), output);
  }

  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.DumpFeature.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // optional string buckets = 5;
  if (has_buckets()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buckets().data(), this->buckets().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.DumpFeature.buckets");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->buckets(), output);
  }

  // map<string, string> contexts = 6;
  {
    ::google::protobuf::scoped_ptr<DumpFeature_ContextsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->contexts().begin();
        it != this->contexts().end(); ++it) {
      entry.reset(contexts_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          6, *entry, output);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:yidian.data.rawlog.DumpFeature)
}

::google::protobuf::uint8* DumpFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yidian.data.rawlog.DumpFeature)
  // optional string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.DumpFeature.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // repeated .yidian.data.rawlog.DocFeature docs = 2;
  for (unsigned int i = 0, n = this->docs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->docs(i), target);
  }

  // optional int64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.DumpFeature.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // optional string buckets = 5;
  if (has_buckets()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buckets().data(), this->buckets().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "yidian.data.rawlog.DumpFeature.buckets");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->buckets(), target);
  }

  // map<string, string> contexts = 6;
  {
    ::google::protobuf::scoped_ptr<DumpFeature_ContextsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->contexts().begin();
        it != this->contexts().end(); ++it) {
      entry.reset(contexts_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              6, *entry, target);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yidian.data.rawlog.DumpFeature)
  return target;
}

int DumpFeature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 29) {
    // optional string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string buckets = 5;
    if (has_buckets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buckets());
    }

  }
  // repeated .yidian.data.rawlog.DocFeature docs = 2;
  total_size += 1 * this->docs_size();
  for (int i = 0; i < this->docs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->docs(i));
  }

  // map<string, string> contexts = 6;
  total_size += 1 * this->contexts_size();
  {
    ::google::protobuf::scoped_ptr<DumpFeature_ContextsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->contexts().begin();
        it != this->contexts().end(); ++it) {
      entry.reset(contexts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpFeature::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DumpFeature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpFeature>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DumpFeature::MergeFrom(const DumpFeature& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  docs_.MergeFrom(from.docs_);
  contexts_.MergeFrom(from.contexts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_buckets()) {
      set_has_buckets();
      buckets_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buckets_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DumpFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpFeature::CopyFrom(const DumpFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpFeature::IsInitialized() const {

  return true;
}

void DumpFeature::Swap(DumpFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpFeature::InternalSwap(DumpFeature* other) {
  user_id_.Swap(&other->user_id_);
  docs_.UnsafeArenaSwap(&other->docs_);
  std::swap(timestamp_, other->timestamp_);
  version_.Swap(&other->version_);
  buckets_.Swap(&other->buckets_);
  contexts_.Swap(&other->contexts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DumpFeature_descriptor_;
  metadata.reflection = DumpFeature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpFeature

// optional string user_id = 1;
bool DumpFeature::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpFeature::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpFeature::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpFeature::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& DumpFeature::user_id() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DumpFeature.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DumpFeature::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DumpFeature.user_id)
}
 void DumpFeature::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yidian.data.rawlog.DumpFeature.user_id)
}
 void DumpFeature::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yidian.data.rawlog.DumpFeature.user_id)
}
 ::std::string* DumpFeature::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.DumpFeature.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DumpFeature::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DumpFeature::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:yidian.data.rawlog.DumpFeature.user_id)
}

// repeated .yidian.data.rawlog.DocFeature docs = 2;
int DumpFeature::docs_size() const {
  return docs_.size();
}
void DumpFeature::clear_docs() {
  docs_.Clear();
}
 const ::yidian::data::rawlog::DocFeature& DumpFeature::docs(int index) const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DumpFeature.docs)
  return docs_.Get(index);
}
 ::yidian::data::rawlog::DocFeature* DumpFeature::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.DumpFeature.docs)
  return docs_.Mutable(index);
}
 ::yidian::data::rawlog::DocFeature* DumpFeature::add_docs() {
  // @@protoc_insertion_point(field_add:yidian.data.rawlog.DumpFeature.docs)
  return docs_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::DocFeature >&
DumpFeature::docs() const {
  // @@protoc_insertion_point(field_list:yidian.data.rawlog.DumpFeature.docs)
  return docs_;
}
 ::google::protobuf::RepeatedPtrField< ::yidian::data::rawlog::DocFeature >*
DumpFeature::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:yidian.data.rawlog.DumpFeature.docs)
  return &docs_;
}

// optional int64 timestamp = 3;
bool DumpFeature::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DumpFeature::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void DumpFeature::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void DumpFeature::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::int64 DumpFeature::timestamp() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DumpFeature.timestamp)
  return timestamp_;
}
 void DumpFeature::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DumpFeature.timestamp)
}

// optional string version = 4;
bool DumpFeature::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DumpFeature::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void DumpFeature::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void DumpFeature::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& DumpFeature::version() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DumpFeature.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DumpFeature::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DumpFeature.version)
}
 void DumpFeature::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yidian.data.rawlog.DumpFeature.version)
}
 void DumpFeature::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yidian.data.rawlog.DumpFeature.version)
}
 ::std::string* DumpFeature::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.DumpFeature.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DumpFeature::release_version() {
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DumpFeature::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:yidian.data.rawlog.DumpFeature.version)
}

// optional string buckets = 5;
bool DumpFeature::has_buckets() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DumpFeature::set_has_buckets() {
  _has_bits_[0] |= 0x00000010u;
}
void DumpFeature::clear_has_buckets() {
  _has_bits_[0] &= ~0x00000010u;
}
void DumpFeature::clear_buckets() {
  buckets_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buckets();
}
 const ::std::string& DumpFeature::buckets() const {
  // @@protoc_insertion_point(field_get:yidian.data.rawlog.DumpFeature.buckets)
  return buckets_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DumpFeature::set_buckets(const ::std::string& value) {
  set_has_buckets();
  buckets_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yidian.data.rawlog.DumpFeature.buckets)
}
 void DumpFeature::set_buckets(const char* value) {
  set_has_buckets();
  buckets_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yidian.data.rawlog.DumpFeature.buckets)
}
 void DumpFeature::set_buckets(const char* value, size_t size) {
  set_has_buckets();
  buckets_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yidian.data.rawlog.DumpFeature.buckets)
}
 ::std::string* DumpFeature::mutable_buckets() {
  set_has_buckets();
  // @@protoc_insertion_point(field_mutable:yidian.data.rawlog.DumpFeature.buckets)
  return buckets_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DumpFeature::release_buckets() {
  clear_has_buckets();
  return buckets_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DumpFeature::set_allocated_buckets(::std::string* buckets) {
  if (buckets != NULL) {
    set_has_buckets();
  } else {
    clear_has_buckets();
  }
  buckets_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buckets);
  // @@protoc_insertion_point(field_set_allocated:yidian.data.rawlog.DumpFeature.buckets)
}

// map<string, string> contexts = 6;
int DumpFeature::contexts_size() const {
  return contexts_.size();
}
void DumpFeature::clear_contexts() {
  contexts_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
DumpFeature::contexts() const {
  // @@protoc_insertion_point(field_map:yidian.data.rawlog.DumpFeature.contexts)
  return contexts_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
DumpFeature::mutable_contexts() {
  // @@protoc_insertion_point(field_mutable_map:yidian.data.rawlog.DumpFeature.contexts)
  return contexts_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rawlog
}  // namespace data
}  // namespace yidian

// @@protoc_insertion_point(global_scope)
